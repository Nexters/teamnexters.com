name: gsheet.action test
on: push

jobs:
  fetch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - id: "env"
        uses: jroehl/gsheet.action@v1.0.0 # you can specify '@release' to always have the latest changes
        with:
          spreadsheetId: ${{ secrets.SPREADSHEET_ID }}
          commands: | # list of commands, specified as a valid JSON string
            [
              { "command": "getData", "args": { "worksheetTitle": "color", "minCol": 1 } },
              { "command": "getData", "args": { "worksheetTitle": ".env", "minCol": 1 } }
            ]
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.GSHEET_PRIVATE_KEY }}.replace(/\\n/g, "\n")
      - name: checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}
      - name: make env.json
        env:
          _env: ${{ steps.env.outputs.results }}
        run: |
          echo "$PWD"
          echo "$_env" > ./_content/env.json
      - id: "main"
        uses: jroehl/gsheet.action@v1.0.0 # you can specify '@release' to always have the latest changes
        with:
          spreadsheetId: ${{ secrets.SPREADSHEET_ID }}
          commands: | # list of commands, specified as a valid JSON string
            [
              { "command": "getData", "args": { "worksheetTitle": "_main", "minCol": 1 } }
            ]
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.GSHEET_PRIVATE_KEY }}.replace(/\\n/g, "\n")
      - name: make main.json
        env:
          main: ${{ steps.main.outputs.results }}
        run: |
          echo "$PWD"
          echo "$main" > ./_content/main.json
      - id: "project"
        uses: jroehl/gsheet.action@v1.0.0 # you can specify '@release' to always have the latest changes
        with:
          spreadsheetId: ${{ secrets.SPREADSHEET_ID }}
          commands: | # list of commands, specified as a valid JSON string
            [
              { "command": "getData", "args": { "worksheetTitle": "project", "minCol": 1 } }
            ]
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.GSHEET_PRIVATE_KEY }}.replace(/\\n/g, "\n")
      - name: make project.json
        run: |
          echo ${{ toJson(steps.project.outputs.results) }} > ./content/project.json
      - id: "about"
        uses: jroehl/gsheet.action@v1.0.0 # you can specify '@release' to always have the latest changes
        with:
          spreadsheetId: ${{ secrets.SPREADSHEET_ID }}
          commands: | # list of commands, specified as a valid JSON string
            [
              { "command": "getData", "args": { "worksheetTitle": "about", "minCol": 1 } },
              { "command": "getData", "args": { "worksheetTitle": "about-review", "minCol": 1} }
            ]
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.GSHEET_PRIVATE_KEY }}.replace(/\\n/g, "\n")
      - name: make about.json
        env:
          about: ${{ steps.about.outputs.results }}
        run: |
          echo "$PWD"
          echo "$about" > ./_content/about.json
      - id: "contact"
        uses: jroehl/gsheet.action@v1.0.0 # you can specify '@release' to always have the latest changes
        with:
          spreadsheetId: ${{ secrets.SPREADSHEET_ID }}
          commands: | # list of commands, specified as a valid JSON string
            [
              { "command": "getData", "args": { "worksheetTitle": "contact", "minCol": 1 } }
            ]
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.GSHEET_PRIVATE_KEY }}.replace(/\\n/g, "\n")
      - name: make contact.json
        env:
          contact: ${{ steps.contact.outputs.results }}
        run: |
          echo "$PWD"
          echo "$contact" > ./_content/contact.json
      - id: "recruitment"
        uses: jroehl/gsheet.action@v1.0.0 # you can specify '@release' to always have the latest changes
        with:
          spreadsheetId: ${{ secrets.SPREADSHEET_ID }}
          commands: | # list of commands, specified as a valid JSON string
            [
              { "command": "getData", "args": { "worksheetTitle": "recruitment", "minCol": 1 }},
              { "command": "getData", "args": { "worksheetTitle": "recruitment-banner-button", "minCol": 1 }},
              { "command": "getData", "args": { "worksheetTitle": "recruitment-qualification", "minCol": 1 }},
              { "command": "getData", "args": { "worksheetTitle": "recruitment-schedule", "minCol": 1 }},
              { "command": "getData", "args": { "worksheetTitle": "recruitment-caution", "minCol": 1 }},
              { "command": "getData", "args": { "worksheetTitle": "recruitment-notice", "minCol": 1 }}
            ]
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.GSHEET_PRIVATE_KEY }}.replace(/\\n/g, "\n")
      - name: make recruitment.json
        env:
          recruitment: ${{ steps.recruitment.outputs.results }}
        run: |
          echo "$PWD"
          echo "$recruitment" > ./_content/recruitment.json
      - id: "color"
        uses: jroehl/gsheet.action@v1.0.0 # you can specify '@release' to always have the latest changes
        with:
          spreadsheetId: ${{ secrets.SPREADSHEET_ID }}
          commands: | # list of commands, specified as a valid JSON string
            [
              { "command": "getData", "args": { "worksheetTitle": "color-palette", "minCol": 1 }}
            ]
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.GSHEET_PRIVATE_KEY }}.replace(/\\n/g, "\n")
      - name: make color.json
        env:
          color: ${{ steps.color.outputs.results }}
        run: |
          echo "$PWD"
          echo "$color" > ./_content/color.json
      - name: python setup
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: transpile projects.json
        run: |
          python .script/make_projects.py
          python .script/make_main.py
          python .script/make_about.py
      - name: commit with push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add *
          git diff-index --quiet HEAD || (git commit -a -m'[bot] update files' --allow-empty && git push)
